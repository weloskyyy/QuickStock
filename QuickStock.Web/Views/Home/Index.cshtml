@{
    ViewData["Title"] = "Dashboard";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@using System.Text.Json


<div class="container">
    <div class="text-center mb-5">
        <h1 class="display-5 fw-bold">Bienvenido a QuickStock</h1>
        <p class="lead text-muted">Panel de control general de productos, categorías y ventas</p>
    </div>

    <div class="row g-4 mb-5">
        <div class="col-md-3">
            <div class="card border-primary shadow h-100">
                <div class="card-body text-center">
                    <i class="bi bi-box-seam display-4 text-primary"></i>
                    <h5 class="card-title mt-3">Productos</h5>
                    <p class="display-6 fw-bold">@ViewBag.TotalProductos</p>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card border-success shadow h-100">
                <div class="card-body text-center">
                    <i class="bi bi-tags display-4 text-success"></i>
                    <h5 class="card-title mt-3">Categorías</h5>
                    <p class="display-6 fw-bold">@ViewBag.TotalCategorias</p>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card border-warning shadow h-100">
                <div class="card-body text-center">
                    <i class="bi bi-cash-stack display-4 text-warning"></i>
                    <h5 class="card-title mt-3">Ventas</h5>
                    <p class="display-6 fw-bold">@ViewBag.TotalVentas</p>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card border-danger shadow h-100">
                <div class="card-body text-center">
                    <i class="bi bi-currency-dollar display-4 text-danger"></i>
                    <h5 class="card-title mt-3">Ingresos</h5>
                    <p class="display-6 fw-bold">@ViewBag.TotalIngresos.ToString("C")</p>
                </div>
            </div>
        </div>
    </div>

    <div class="row mb-5">
        <div class="col-md-12">
            <div class="card shadow p-4">
                <h4 class="mb-3">Acciones rápidas</h4>
                <div class="d-flex gap-3 flex-wrap">
                    <a class="btn btn-outline-primary" asp-controller="Product" asp-action="Create">➕ Nuevo Producto</a>
                    <button id="view-products-btn" class="btn btn-outline-primary">
                        <i class="bi bi-list"></i> Ver Productos
                    </button>
                    <a class="btn btn-outline-success" asp-controller="Category" asp-action="Create">🗂️ Nueva Categoría</a>
                    <a class="btn btn-outline-warning" asp-controller="Sale" asp-action="Create">💸 Nueva Venta</a>
                </div>
            </div>
        </div>
    </div>

    
    <div id="message-container"></div>

    <div id="products-container" class="card shadow mb-5 d-none">
        <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
            <h5 class="mb-0">Lista de Productos</h5>
            <button type="button" class="btn-close btn-close-white" id="close-products-btn" aria-label="Close"></button>
        </div>
        <div class="card-body">
           
        </div>
    </div>

    <div class="card shadow mb-5">
        <div class="card-body">
            <h4 class="card-title text-center mb-4">Ingresos por Día</h4>
            <canvas id="graficoIngresos" height="100"></canvas>
        </div>
    </div>
   @section Scripts {
        <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
        <script>
            const ctx = document.getElementById('graficoIngresos').getContext('2d');
            const fechas = @Html.Raw(JsonSerializer.Serialize(ViewBag.Fechas));
            const montos = @Html.Raw(JsonSerializer.Serialize(ViewBag.Montos));


            new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: fechas,
                    datasets: [{
                        label: 'Ingresos en RD$',
                        data: montos,
                        backgroundColor: 'rgba(75, 192, 192, 0.7)',
                        borderColor: 'rgba(75, 192, 192, 1)',
                        borderWidth: 2
                    }]
                },
                options: {
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                callback: value => 'RD$ ' + value.toLocaleString()
                            }
                        }
                    }
                }
            });

            // Código para manejar la visualización de productos
            document.addEventListener("DOMContentLoaded", () => {
                const viewProductsBtn = document.getElementById("view-products-btn");
                const closeProductsBtn = document.getElementById("close-products-btn");
                const productsContainer = document.getElementById("products-container");

                if (viewProductsBtn) {
                    viewProductsBtn.addEventListener("click", () => {
                        productsContainer.classList.remove("d-none");
                        handleViewProducts();
                    });
                }

                if (closeProductsBtn) {
                    closeProductsBtn.addEventListener("click", () => {
                        productsContainer.classList.add("d-none");
                    });
                }
            });

           
            async function getAllProducts() {
                try {
                    
                    const apiUrl = "https://localhost:7122/api/products";

                    const response = await fetch(apiUrl);

                    
                    if (!response.ok) {
                        throw new Error(`Error ${response.status}: ${response.statusText}`);
                    }

                    
                    return await response.json();
                } catch (error) {
                    console.error("Error al obtener los productos:", error);
                    throw error;
                }
            }

          
            async function handleViewProducts() {
                
                const productsContainer = document.querySelector("#products-container .card-body");
                if (productsContainer) {
                    productsContainer.innerHTML = '<div class="text-center my-5"><div class="spinner-border text-primary" role="status"><span class="visually-hidden">Cargando...</span></div><p class="mt-2">Cargando productos...</p></div>';
                }

                try {
                    
                    const products = await getAllProducts();

                    
                    displayProducts(products);
                } catch (error) {
                    console.error("Error al cargar los productos:", error);
                    showMessage("danger", `Error al cargar los productos: ${error.message}`);

                    if (productsContainer) {
                        productsContainer.innerHTML = '<div class="alert alert-danger">No se pudieron cargar los productos. Por favor, intente nuevamente.</div>';
                    }
                }
            }

            
            function showMessage(type, message) {
                
                const alertDiv = document.createElement("div");
                alertDiv.className = `alert alert-${type} alert-dismissible fade show`;
                alertDiv.role = "alert";
                alertDiv.innerHTML = `
                    ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                `;

               
                let messageContainer = document.getElementById("message-container");

                
                if (!messageContainer) {
                    messageContainer = document.createElement("div");
                    messageContainer.id = "message-container";
                    messageContainer.className = "mb-3";

                   
                    const productsContainer = document.getElementById("products-container");
                    productsContainer.parentNode.insertBefore(messageContainer, productsContainer);
                }

                
                messageContainer.appendChild(alertDiv);

                
                setTimeout(() => {
                    alertDiv.classList.remove("show");
                    setTimeout(() => alertDiv.remove(), 150);
                }, 5000);
            }

           
            function displayProducts(products) {
                const productsContainer = document.querySelector("#products-container .card-body");

                if (!productsContainer) return;

                
                productsContainer.innerHTML = "";

                if (products.length === 0) {
                    productsContainer.innerHTML = '<div class="alert alert-info">No hay productos disponibles.</div>';
                    return;
                }

                
                const table = document.createElement("table");
                table.className = "table table-striped table-hover";

               
                const thead = document.createElement("thead");
                thead.innerHTML = `
                    <tr>
                        <th>ID</th>
                        <th>Nombre</th>
                        <th>Tamaño</th>
                        <th>Color</th>
                        <th>Precio</th>
                        <th>Stock</th>
                        <th>Categoría</th>
                        <th>Acciones</th>
                    </tr>
                `;
                table.appendChild(thead);

               
                const tbody = document.createElement("tbody");

                
                products.forEach((product) => {
                    const tr = document.createElement("tr");
                    tr.innerHTML = `
                        <td>${product.id}</td>
                        <td>${product.name}</td>
                        <td>${product.size}</td>
                        <td>${product.color}</td>
                        <td>${product.price.toFixed(2)}</td>
                        <td>${product.stock}</td>
                        <td>${product.categoryId}</td>
                        <td>
                            <div class="btn-group btn-group-sm" role="group">
                                <a href="/Product/Edit/${product.id}" class="btn btn-primary" data-bs-toggle="tooltip" title="Editar">
                                    <i class="bi bi-pencil"></i>
                                </a>
                                <button type="button" class="btn btn-danger delete-product" data-id="${product.id}" data-bs-toggle="tooltip" title="Eliminar">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </div>
                        </td>
                    `;
                    tbody.appendChild(tr);
                });

                table.appendChild(tbody);
                productsContainer.appendChild(table);

                
                if (typeof bootstrap !== "undefined" && bootstrap.Tooltip) {
                    const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
                    tooltipTriggerList.map((tooltipTriggerEl) => new bootstrap.Tooltip(tooltipTriggerEl));
                }

                
                const deleteButtons = document.querySelectorAll(".delete-product");
                deleteButtons.forEach((button) => {
                    button.addEventListener("click", async function () {
                        const productId = this.getAttribute("data-id");
                        if (confirm("¿Está seguro de que desea eliminar este producto?")) {
                            try {
                                await deleteProduct(productId);
                                showMessage("success", "Producto eliminado exitosamente");
                                
                                handleViewProducts();
                            } catch (error) {
                                showMessage("danger", `Error al eliminar el producto: ${error.message}`);
                            }
                        }
                    });
                });
            }

          
            async function deleteProduct(id) {
                try {
                    
                    const apiUrl = `https://localhost:7122/api/products/${id}`;

                    
                    const requestOptions = {
                        method: 'DELETE'
                    };

                    
                    const response = await fetch(apiUrl, requestOptions);

                    
                    if (!response.ok) {
                        throw new Error(`Error ${response.status}: ${response.statusText}`);
                    }

                    
                    return true;
                } catch (error) {
                    console.error('Error al eliminar el producto:', error);
                    throw error;
                }
            }
        </script>
    }
</div>

@section Styles {
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" rel="stylesheet" />
}